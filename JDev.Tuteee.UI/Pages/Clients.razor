@page "/"
@page "/clients"
@using JDev.Tuteee.ApiClient
@using JDev.Tuteee.ApiClient.DTOs
@inject IApiClient Client;

<PageTitle>Clients</PageTitle>

<div class="d-flex flex-row justify-content-between mb-2">
    <h1>Clients</h1>
    <Button Color="ButtonColor.Primary" @onclick="OnShowAddClientModal">Add client</Button>
</div>

<Modal @ref="_modal" Title="Enter new client details">
    <BodyTemplate>
        First name
        <TextInput @bind-Value="_newClientFirstName"></TextInput>
        Last name
        <TextInput @bind-Value="_newClientLastName"></TextInput>
        Email address
        <TextInput @bind-Value="_newClientEmailAddress"></TextInput>
        Phone number
        <TextInput @bind-Value="_newClientPhoneNumber"></TextInput>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideAddClientModal">Add client</Button>
    </FooterTemplate>
</Modal>

@if (_clients == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Grid @ref="_clientGrid"
          TItem="ClientDto"
          Class="table table-hover table-bordered table-striped"
          DataProvider="ClientsDataProvider"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="ClientDto" HeaderText="First name" PropertyName="HolderFirstName">
                <NavLink class="nav-link" href=@($"/clients/{context.ClientId}") Match="NavLinkMatch.All">
                    @context.HolderFirstName
                </NavLink>
            </GridColumn>
            <GridColumn TItem="ClientDto" HeaderText="Last name" PropertyName="HolderLastName">
                <NavLink class="nav-link" href=@($"/clients/{context.ClientId}") Match="NavLinkMatch.All">
                    @context.HolderLastName
                </NavLink>
            </GridColumn>
            <GridColumn TItem="ClientDto" HeaderText="Email" PropertyName="EmailAddress">
                @context.EmailAddress
            </GridColumn>
            <GridColumn TItem="ClientDto" HeaderText="Contact" PropertyName="PhoneNumer">
                @context.PhoneNumber
            </GridColumn>
        </GridColumns>
    </Grid>
}

@code {
    private IEnumerable<ClientDto>? _clients;
    private Modal _modal = default!;
    private Grid<ClientDto> _clientGrid = default!;
    private string _newClientFirstName = default!;
    private string _newClientLastName = default!;
    private string _newClientEmailAddress = default!;
    private string _newClientPhoneNumber = default!;

    private async Task OnShowAddClientModal()
    {
        await _modal.ShowAsync();
    }

    private async Task OnHideAddClientModal()
    {
        var dto = new ClientDto
        {
            HolderFirstName = _newClientFirstName,
            HolderLastName = _newClientLastName,
            EmailAddress = _newClientEmailAddress,
            PhoneNumber = _newClientPhoneNumber
        };
        await Client.AddClientAsync(dto);

        ResetNewClientInfo();
        
        _clients = await Client.GetClientsAsync();
        await _clientGrid.RefreshDataAsync();
        
        await _modal.HideAsync();
    }

    private void ResetNewClientInfo()
    {
        _newClientFirstName = "";
        _newClientLastName = "";
        _newClientEmailAddress = "";
        _newClientPhoneNumber = "";
    }

    protected override async Task OnInitializedAsync()
    {
        _clients = await Client.GetClientsAsync();
    }

    private async Task<GridDataProviderResult<ClientDto>> ClientsDataProvider(GridDataProviderRequest<ClientDto> request)
    {
        return await Task.FromResult(request.ApplyTo(_clients));
    }
}