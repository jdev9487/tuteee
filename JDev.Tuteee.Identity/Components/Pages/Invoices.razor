@attribute [Route($"/{Routing.Invoices}")]

@using JDev.Tuteee.Rest.ApiClient
@using JDev.Tuteee.Rest.ApiClient.DTOs
@using Microsoft.AspNetCore.Authorization
@inject IRestApiClient RestApiClient;
@attribute [StreamRendering]
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Invoices</PageTitle>

<Modal @ref="_modal" Title="Invoice a client">
    <BodyTemplate>
        Which client?
        <AutoComplete @bind-Value="_invoiceClientName"
                      TItem="ClientDto"
                      DataProvider="ClientDataProvider"
                      PropertyName="HolderName"
                      Placeholder="Search billable client"
                      OnChanged="(ClientDto client) => OnInvoiceClientChosen(client)"></AutoComplete>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideAddInvoiceModal">Create Invoice</Button>
    </FooterTemplate>
</Modal>

<div class="d-flex flex-row justify-content-between mb-2">
    <h3>Invoices</h3>
    <Button Color="ButtonColor.Primary" @onclick="OnShowAddInvoiceModal">Create Invoice</Button>
</div>

@if (_invoices is null)
{
    <p>Loading</p>
}
else
{
    <Grid @ref="_invoiceGrid"
          TItem="InvoiceDto"
          Class="table table-hover table-bordered table-striped"
          DataProvider="InvoicesDataProvider"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="InvoiceDto" HeaderText="Client" PropertyName="FirstName">
                @context.Client.HolderFirstName @context.Client.HolderLastName
            </GridColumn>
            <GridColumn TItem="InvoiceDto" HeaderText="Lessons" PropertyName="Lessons">
                @GetLessonIdsString(context.Lessons)
            </GridColumn>
            <GridColumn TItem="InvoiceDto" HeaderText="Amount" PropertyName="Amount">
                @ToCurrency(context.Amount)
            </GridColumn>
            <GridColumn TItem="InvoiceDto" HeaderText="Paid" PropertyName="Paid">
                @GetPaidString(context.Paid)
            </GridColumn>
        </GridColumns>
    </Grid>
}

@code {
    private IReadOnlyList<InvoiceDto>? _invoices;
    private Grid<InvoiceDto> _invoiceGrid = default!;
    private Modal _modal = default!;
    private string _invoiceClientName = default!;
    private ClientDto? _invoiceClient;
    
    protected override async Task OnInitializedAsync()
    {
        _invoices = await RestApiClient.GetInvoicesAsync();
    }
    
    private async Task<GridDataProviderResult<InvoiceDto>> InvoicesDataProvider(GridDataProviderRequest<InvoiceDto> request)
    {
        return await Task.FromResult(request.ApplyTo(_invoices ?? []));
    }
    private async Task<AutoCompleteDataProviderResult<ClientDto>> ClientDataProvider(AutoCompleteDataProviderRequest<ClientDto> request)
    {
        var clients = await RestApiClient.GetClientsAsync();
        return await Task.FromResult(new AutoCompleteDataProviderResult<ClientDto> { Data = clients, TotalCount = clients.Count });
    }
    private void OnInvoiceClientChosen(ClientDto client)
    {
        _invoiceClient = client;
    }

    private async Task OnShowAddInvoiceModal()
    {
        await _modal.ShowAsync();
    }
    private async Task OnHideAddInvoiceModal()
    {
        // await grpc call here to create invoice for all client's lessons that have no invoice attached to them

        ResetInvoiceClientInfo();
    
        _invoices = await RestApiClient.GetInvoicesAsync();
        await _invoiceGrid.RefreshDataAsync();

        await _modal.HideAsync();
    }

    private static string GetLessonIdsString(IEnumerable<LessonDto> lessonDtos)
    {
        return string.Join(',', lessonDtos.Select(l => l.LessonId.ToString()));
    }

    private static string GetPaidString(bool paid) => paid ? "✅" : "❌";
    private static string ToCurrency(decimal dec) => dec.ToString("C");
    
    private void ResetInvoiceClientInfo()
    {
        _invoiceClient = null;
        _invoiceClientName = string.Empty;
    }
}