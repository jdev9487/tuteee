@attribute [Route(Routing.Client)]

@using BlazorBootstrap
@using JDev.Tuteee.Rest.ApiClient.ApiClients
@using JDev.Tuteee.Rest.ApiClient.DTOs
@using Microsoft.AspNetCore.Authorization

@inherits JDev.Tuteee.Identity.Components.CancellableComponentBase

@inject IClientRestApiClient ClientRestApiClient
@inject ITuteeRestApiClient TuteeRestApiClient
@attribute [StreamRendering]
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<PageTitle>@ClientName</PageTitle>

<Breadcrumb Items="_navItems"></Breadcrumb>

<Modal @ref="_modal" Title="Enter new tutee details">
    <BodyTemplate>
        First name
        <TextInput @bind-Value="_newTuteeFirstName"></TextInput>
        Last name
        <TextInput @bind-Value="_newTuteeLastName"></TextInput>
        Email address
        <TextInput @bind-Value="_newTuteeEmailAddress"></TextInput>
        Initial rate (pence per hour)
        <NumberInput TValue="int" @bind-Value="_newTuteePencePerHour"></NumberInput>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="OnHideAddTuteeModal">Add tutee</Button>
    </FooterTemplate>
</Modal>

<div class="d-flex flex-row justify-content-between mb-2">
    <h3>Tutees</h3>
    <Button Color="ButtonColor.Primary" @onclick="OnShowAddTuteeModal">Add Tutee</Button>
</div>

@if (_client == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Grid @ref="_tuteeGrid"
          TItem="TuteeDto"
          Class="table table-hover table-bordered table-striped"
          DataProvider="ClientsDataProvider"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="TuteeDto" HeaderText="First name" PropertyName="FirstName">
                <NavLink class="nav-link" href=@($"tutees/{context.TuteeId}") Match="NavLinkMatch.All">
                    @context.FirstName
                </NavLink>
            </GridColumn>
            <GridColumn TItem="TuteeDto" HeaderText="Last name" PropertyName="LastName">
                <NavLink class="nav-link" href=@($"tutees/{context.TuteeId}") Match="NavLinkMatch.All">
                    @context.LastName
                </NavLink>
            </GridColumn>
            <GridColumn TItem="TuteeDto" HeaderText="Email" PropertyName="EmailAddress">
                @context.EmailAddress
            </GridColumn>
            <GridColumn TItem="TuteeDto" HeaderText="Rate (Â£/hr)">
                @context.ActiveRate.ToCurrency()
            </GridColumn>
        </GridColumns>
    </Grid>
}

@code {
    [Parameter]
    public int ClientId { get; set; }
    private ClientDto? _client;
    private Grid<TuteeDto> _tuteeGrid = default!;
    private Modal _modal = default!;
    private List<BreadcrumbItem> _navItems = default!;
    private string _newTuteeFirstName = default!;
    private string _newTuteeLastName = default!;
    private string _newTuteeEmailAddress = default!;
    private int _newTuteePencePerHour;

    private string ClientName => $"{_client?.HolderFirstName} {_client?.HolderLastName}";

    protected override async Task OnInitializedAsync()
    {
        _client = await ClientRestApiClient.GetAsync(ClientId, CancellationToken);
        _navItems = new List<BreadcrumbItem>
        {
            new() { Text = $"{ClientName} ðŸ“‚", IsCurrentPage = true }
        };
    }
    private async Task OnShowAddTuteeModal()
    {
        await _modal.ShowAsync();
    }

    private async Task OnHideAddTuteeModal()
    {
        var dto = new TuteeDto
        {
            FirstName = _newTuteeFirstName,
            LastName = _newTuteeLastName,
            EmailAddress = _newTuteeEmailAddress,
            ClientId = ClientId,
            Rates = [new RateDto
            {
                PencePerHour = _newTuteePencePerHour,
                ActiveFrom = DateTimeOffset.MinValue
            }]
        };
        await TuteeRestApiClient.AddAsync(dto, CancellationToken);

        ResetNewClientInfo();

        _client = await ClientRestApiClient.GetAsync(ClientId, CancellationToken);
        await _tuteeGrid.RefreshDataAsync();
        
        await _modal.HideAsync();
    }
    private void ResetNewClientInfo()
    {
        _newTuteeFirstName = "";
        _newTuteeLastName = "";
        _newTuteeEmailAddress = "";
        _newTuteePencePerHour = 0;
    }

    private async Task<GridDataProviderResult<TuteeDto>> ClientsDataProvider(GridDataProviderRequest<TuteeDto> request)
    {
        return await Task.FromResult(request.ApplyTo(_client?.Tutees ?? []));
    }
}